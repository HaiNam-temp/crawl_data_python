import datetime
import streamlit as st
import sqlite3
from data import search_products # Bot c≈©ng c·∫ßn bi·∫øt t√¨m ki·∫øm
from logger_config import get_logger

logger = get_logger(__name__)
from logger_config import get_logger


logger = get_logger(__name__)

# --- 1. THI·∫æT L·∫¨P C∆† S·ªû D·ªÆ LI·ªÜU (SQLITE) ---

DB_FILE = "chat_history.db"

def get_db_connection():
    """T·∫°o v√† tr·∫£ v·ªÅ m·ªôt k·∫øt n·ªëi ƒë·∫øn DB SQLite."""
    conn = sqlite3.connect(DB_FILE)
    # C√†i ƒë·∫∑t n√†y ƒë·ªÉ k·∫øt qu·∫£ tr·∫£ v·ªÅ c√≥ th·ªÉ truy c·∫≠p b·∫±ng t√™n c·ªôt (nh∆∞ dict)
    conn.row_factory = sqlite3.Row 
    return conn

def init_db():
    """Kh·ªüi t·∫°o CSDL v√† b·∫£ng 'messages' n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i."""
    conn = get_db_connection()
    try:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                role TEXT NOT NULL,
                content TEXT NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """
        )
        conn.commit()
    finally:
        conn.close()

def load_messages_from_db():
    """T·∫£i t·∫•t c·∫£ tin nh·∫Øn t·ª´ CSDL, s·∫Øp x·∫øp theo th·ªùi gian."""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT role, content FROM messages ORDER BY timestamp ASC")
        # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ (sqlite3.Row) th√†nh list[dict] chu·∫©n
        messages = [{"role": row["role"], "content": row["content"]} for row in cursor.fetchall()]
        
        # N·∫øu kh√¥ng c√≥ tin nh·∫Øn n√†o, th√™m tin nh·∫Øn ch√†o m·ª´ng
        if not messages:
            messages.append(
                {"role": "assistant", "content": "Xin ch√†o! T√¥i l√† Tr·ª£ l√Ω So S√°nh Gi√°. B·∫°n c·∫ßn t√¨m s·∫£n ph·∫©m n√†o?"}
            )
        return messages
    finally:
        conn.close()

def save_message_to_db(role, content):
    """L∆∞u m·ªôt tin nh·∫Øn m·ªõi (c·ªßa user ho·∫∑c assistant) v√†o CSDL."""
    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT INTO messages (role, content) VALUES (?, ?)",
            (role, content)
        )
        conn.commit()
    finally:
        conn.close()

# --- 2. LOGIC C·ª¶A BOT (Gi·ªØ nguy√™n) ---

def generate_bot_response(user_input):
    logger.info(f"User query: {user_input}")
    try:
        from chatbot import process_user_query

        # process_user_query returns a string response ready to show in UI
        return process_user_query(user_input)
    except Exception:
        # Fallback: simple local heuristic bot when the full chatbot isn't
        # available (e.g., missing dependencies in the environment).
        query = user_input.lower()
        bot_reply = "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu √Ω b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ t√™n s·∫£n ph·∫©m ƒë∆∞·ª£c kh√¥ng?"

        if "iphone 15" in query:
            products = search_products("iphone 15")
            if products:
                bot_reply = "T√¥i t√¨m th·∫•y c√°c s·∫£n ph·∫©m iPhone 15 sau:\n\n"
                for p in products:
                    bot_reply += f"- {p['name']} t·∫°i {p['vendor']}\n  Gi√°: {p['price']:,} ‚Ç´\n\n"
            else:
                bot_reply = "R·∫•t ti·∫øc, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m iPhone 15 n√†o."

        elif "tai nghe" in query or "baseus" in query:
            products = search_products("baseus")
            if products:
                bot_reply = "T√¥i t√¨m th·∫•y c√°c tai nghe Baseus sau:\n\n"
                for p in products:
                    bot_reply += f"- {p['name']} t·∫°i {p['vendor']}\n  Gi√°: {p['price']:,} ‚Ç´\n\n"
            else:
                bot_reply = "R·∫•t ti·∫øc, t√¥i kh√¥ng t√¨m th·∫•y tai nghe Baseus n√†o."

        elif "ch√†o" in query or "hello" in query:
            bot_reply = "Ch√†o b·∫°n, t√¥i l√† Tr·ª£ l√Ω Gi√° c·∫£. B·∫°n c·∫ßn t√¨m g√¨ n√†o?"

        return bot_reply

# --- 3. GIAO DI·ªÜN CHAT STREAMLIT ---

# Kh·ªüi t·∫°o CSDL ngay khi b·∫Øt ƒë·∫ßu
init_db()

# --- Qu·∫£n l√Ω L·ªãch s·ª≠ Chat ---
# Ch·ªâ t·∫£i t·ª´ DB 1 L·∫¶N DUY NH·∫§T khi session_state "messages" ch∆∞a t·ªìn t·∫°i
# (T·ª©c l√† khi ng∆∞·ªùi d√πng m·ªõi m·ªü tab)
if "messages" not in st.session_state:
    st.session_state.messages = load_messages_from_db()

# --- Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ trang ---
st.title("Tr·ª£ l√Ω So S√°nh Gi√° üí¨")

# --- Hi·ªÉn th·ªã c√°c tin nh·∫Øn c≈© ---
# Lu√¥n hi·ªÉn th·ªã t·ª´ session_state (v√¨ n√≥ ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª´ DB)
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# --- Khung nh·∫≠p li·ªáu (X·ª≠ l√Ω tin nh·∫Øn m·ªõi) ---
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    # 1. Th√™m tin nh·∫Øn USER v√†o session_state (ƒë·ªÉ hi·ªÉn th·ªã) v√† DB (ƒë·ªÉ l∆∞u)
    logger.info("Received prompt from user: %r", prompt)
    st.session_state.messages.append({"role": "user", "content": prompt})
    save_message_to_db("user", prompt)
    
    # Hi·ªÉn th·ªã tin nh·∫Øn user ngay l·∫≠p t·ª©c
    with st.chat_message("user"):
        st.markdown(prompt)

    # 2. T·∫°o v√† hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa BOT
    # (Th√™m hi·ªáu ·ª©ng "ƒêang suy nghƒ©..." cho chuy√™n nghi·ªáp)
    with st.chat_message("assistant"):
        with st.spinner("ƒêang suy nghƒ©..."):
            try:
                bot_response = generate_bot_response(prompt)
                logger.info("Bot response generated (len=%d)", len(bot_response) if bot_response else 0)
            except Exception as e:
                logger.error("Error generating bot response: %s", str(e))
                bot_response = "Xin l·ªói, ƒë√£ c√≥ l·ªói khi t·∫°o ph·∫£n h·ªìi."
        st.markdown(bot_response)
    
    # 3. Th√™m tin nh·∫Øn BOT v√†o session_state (ƒë·ªÉ hi·ªÉn th·ªã) v√† DB (ƒë·ªÉ l∆∞u)
    st.session_state.messages.append({"role": "assistant", "content": bot_response})
    save_message_to_db("assistant", bot_response)