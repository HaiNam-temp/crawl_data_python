// js/chat.js
document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('token');
    if (!token) return;

    const historyList = document.getElementById('chat-history-list');
    const messagesContainer = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const sendBtn = document.getElementById('chat-send-btn');
    const newChatBtn = document.getElementById('new-chat-btn');

    let currentChatId = localStorage.getItem('current_chat_id') ? parseInt(localStorage.getItem('current_chat_id'), 10) : null;

    // --- H√†m g·ªçi API chung ---
    async function fetchAPI(url, options = {}) {
        const baseURL = 'http://localhost:8010';
        const fullURL = url.startsWith('http') ? url : baseURL + url;
        
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        };
        const mergedOptions = { ...defaultOptions, ...options };
        // ƒê·∫£m b·∫£o headers ƒë∆∞·ª£c merge ƒë√∫ng c√°ch
        mergedOptions.headers = { ...defaultOptions.headers, ...(options.headers || {}) };
         // X√≥a Content-Type cho GET ho·∫∑c khi kh√¥ng c√≥ body
         if (!mergedOptions.body && mergedOptions.method !== 'POST' && mergedOptions.method !== 'PUT' && mergedOptions.method !== 'PATCH') {
             delete mergedOptions.headers['Content-Type'];
         }

        try {
            const response = await fetch(fullURL, mergedOptions);
            if (!response.ok) {
                if (response.status === 401) { logoutUser(); } // G·ªçi h√†m logout t·ª´ global.js
                const errorText = await response.text();
                console.error("API Error:", response.status, errorText);
                throw new Error(`API Error ${response.status}: ${errorText || response.statusText}`); // Throw error ƒë·ªÉ catch x·ª≠ l√Ω
            }
             if (response.headers.get("content-length") === "0" || response.status === 204) {
                 return {}; // Tr·∫£ v·ªÅ object r·ªóng cho No Content
             }
            return await response.json();
        } catch (error) {
            console.error("Fetch Error:", error);
            throw error; // Re-throw ƒë·ªÉ h√†m g·ªçi x·ª≠ l√Ω
        }
    }

    // --- H√†m t·∫£i l·ªãch s·ª≠ chat ---
    async function loadChatHistory() {
        historyList.innerHTML = 'ƒêang t·∫£i...';
        try {
            // *** API L·∫§Y CONVERSATIONS: /conversations/ (GET) ***
            const conversations = await fetchAPI('/conversations/');
            historyList.innerHTML = '';
            if (conversations && Array.isArray(conversations) && conversations.length > 0) {
                conversations.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at)); // S·∫Øp x·∫øp theo updated_at t·ª´ API
                conversations.forEach(conv => {
                    const item = document.createElement('div');
                    item.className = 'chat-history-item';
                    item.dataset.chatId = conv.id;
                    if (conv.id === currentChatId) item.classList.add('active');

                    // T·∫°o wrapper cho title v√† button
                    const titleSpan = document.createElement('span');
                    titleSpan.textContent = conv.title;
                    titleSpan.style.flex = '1';
                    titleSpan.style.cursor = 'pointer';
                    titleSpan.style.overflow = 'hidden';
                    titleSpan.style.textOverflow = 'ellipsis';
                    titleSpan.style.whiteSpace = 'nowrap';
                    
                    // N√∫t menu 3 ch·∫•m
                    const menuBtn = document.createElement('button');
                    menuBtn.innerHTML = '‚ãÆ'; // 3 ch·∫•m d·ªçc
                    menuBtn.className = 'chat-menu-btn';
                    menuBtn.title = 'Menu';
                    
                    // T·∫°o menu dropdown
                    const menu = document.createElement('div');
                    menu.className = 'chat-menu-dropdown';
                    menu.style.display = 'none';
                    menu.innerHTML = `
                        <div class="chat-menu-item delete-item">
                            üóëÔ∏è X√≥a chat
                        </div>
                    `;
                    
                    // Toggle menu
                    menuBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        
                        // ƒê√≥ng t·∫•t c·∫£ menu kh√°c
                        document.querySelectorAll('.chat-menu-dropdown').forEach(m => {
                            if (m !== menu) m.style.display = 'none';
                        });
                        
                        // Toggle menu n√†y
                        menu.style.display = menu.style.display === 'none' ? 'block' : 'none';
                    });
                    
                    // X√≥a chat khi click v√†o menu item
                    menu.querySelector('.delete-item').addEventListener('click', async (e) => {
                        e.stopPropagation();
                        menu.style.display = 'none';
                        
                        if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a chat "${conv.title}"?\n\nL∆∞u √Ω: Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!`)) {
                            try {
                                await fetchAPI(`/conversations/${conv.id}`, { method: 'DELETE' });
                                
                                // N·∫øu ƒëang xem chat n√†y, reset v·ªÅ chat m·ªõi v√† reload
                                if (currentChatId === conv.id) {
                                    currentChatId = null;
                                    localStorage.removeItem('current_chat_id');
                                    window.location.reload();
                                } else {
                                    // Ch·ªâ reload l·∫°i history
                                    await loadChatHistory();
                                }
                            } catch (error) {
                                alert(`L·ªói x√≥a chat: ${error.message}`);
                            }
                        }
                    });

                    // Click v√†o title ƒë·ªÉ chuy·ªÉn chat
                    titleSpan.addEventListener('click', () => {
                         if (currentChatId === conv.id) return; // Kh√¥ng l√†m g√¨ n·∫øu click v√†o chat ƒëang active
                        currentChatId = conv.id;
                        localStorage.setItem('current_chat_id', currentChatId);
                        loadChatMessages(); // T·∫£i messages m·ªõi
                        // C·∫≠p nh·∫≠t active class
                        document.querySelectorAll('.chat-history-item').forEach(el => el.classList.remove('active'));
                        item.classList.add('active');
                    });
                    
                    // T·∫°o container cho menu button v√† dropdown
                    const menuContainer = document.createElement('div');
                    menuContainer.style.position = 'relative';
                    menuContainer.appendChild(menuBtn);
                    menuContainer.appendChild(menu);
                    
                    item.appendChild(titleSpan);
                    item.appendChild(menuContainer);
                    historyList.appendChild(item);
                });
            } else {
                 historyList.innerHTML = '<p style="font-size: 0.9em; color: #888;">Ch∆∞a c√≥ tr√≤ chuy·ªán n√†o.</p>';
            }
        } catch (error) {
            historyList.innerHTML = '<p style="font-size: 0.9em; color: red;">L·ªói t·∫£i l·ªãch s·ª≠.</p>';
        }
    }

    // --- H√†m t·∫£i tin nh·∫Øn ---
    async function loadChatMessages() {
        messagesContainer.innerHTML = '';
        if (currentChatId) {
            messagesContainer.innerHTML = '<div class="message bot"><div class="text">ƒêang t·∫£i tin nh·∫Øn...</div></div>';
            try {
                // *** API L·∫§Y MESSAGES: /conversations/{id}/messages (GET) ***
                const messages = await fetchAPI(`/conversations/${currentChatId}/messages`);
                messagesContainer.innerHTML = '';
                if (messages && Array.isArray(messages)) {
                    messages.forEach(msg => addMessageToUI(msg.role, msg.content));
                } else {
                    addMessageToUI('bot', 'Ch∆∞a c√≥ tin nh·∫Øn n√†o.');
                }
            } catch (error) {
                 messagesContainer.innerHTML = '';
                 addMessageToUI('bot', 'L·ªói t·∫£i tin nh·∫Øn.');
            }
        } else {
            addMessageToUI('bot', 'Xin ch√†o! B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m n√†o h√¥m nay?');
        }
        // Cu·ªôn xu·ªëng cu·ªëi sau khi render
        setTimeout(() => { messagesContainer.scrollTop = messagesContainer.scrollHeight; }, 0);
    }

     // --- H√†m th√™m tin nh·∫Øn v√†o UI ---
    function addMessageToUI(role, content) {
        const formattedContent = content.replace(/\n/g, '<br>');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${role}`;
        messageDiv.innerHTML = `<div class="text">${formattedContent}</div>`;
        messagesContainer.appendChild(messageDiv);
        // Cu·ªôn xu·ªëng cu·ªëi
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }


    // --- H√†m G·ª≠i tin nh·∫Øn ---
    async function sendMessage() {
        const userText = chatInput.value.trim();
        if (userText === '') return;

        const originalChatId = currentChatId; // L∆∞u l·∫°i ID tr∆∞·ªõc khi g·ª≠i
        addMessageToUI('user', userText); // Hi·ªÉn th·ªã ngay
        chatInput.value = '';
        chatInput.disabled = true;
        sendBtn.disabled = true;

        let tempChatId = currentChatId;
        let isNewChat = false;

        try {
             if (tempChatId === null) {
                 isNewChat = true;
                 messagesContainer.innerHTML = ''; // X√≥a ch√†o m·ª´ng
                 addMessageToUI('user', userText); // Hi·ªÉn th·ªã l·∫°i user msg
                 const title = userText.length > 30 ? userText.substring(0, 30) + '...' : userText;
                 // *** API T·∫†O CONVERSATION M·ªöI: /conversations/ (POST) ***
                 const newConvData = await fetchAPI('/conversations/', {
                     method: 'POST',
                     body: JSON.stringify({ title: title }) // Backend c·∫ßn schema ConversationCreate(title: str)
                 });
                 if (newConvData && newConvData.id) {
                     tempChatId = newConvData.id;
                     currentChatId = tempChatId;
                     localStorage.setItem('current_chat_id', currentChatId);
                     // Kh√¥ng load l·∫°i history ngay, ƒë·ªÉ tr√°nh nh√°y m√†n h√¨nh, ch·ªâ th√™m v√†o UI
                     const newItem = document.createElement('div');
                     newItem.className = 'chat-history-item active'; // Th√™m active ngay
                     newItem.textContent = newConvData.title;
                     newItem.dataset.chatId = newConvData.id;
                      newItem.addEventListener('click', () => { /* ... (g·∫Øn listener nh∆∞ trong loadChatHistory) ... */ });
                     // X√≥a th√¥ng b√°o "ch∆∞a c√≥" n·∫øu c√≥
                      const noHistoryMsg = historyList.querySelector('p');
                      if (noHistoryMsg) noHistoryMsg.remove();
                     // Th√™m v√†o ƒë·∫ßu danh s√°ch
                     historyList.insertBefore(newItem, historyList.firstChild);
                      // B·ªè active c·ªßa item c≈© (n·∫øu c√≥)
                      document.querySelectorAll('.chat-history-item:not([data-chat-id="'+newItem.dataset.chatId+'"])')
                          .forEach(el => el.classList.remove('active'));

                 } else { throw new Error("Kh√¥ng th·ªÉ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi."); }
             }

             // *** API G·ª¨I MESSAGE & NH·∫¨N PH·∫¢N H·ªíI: /conversations/{id}/chat (POST) ***
             const botResponseData = await fetchAPI(`/conversations/${tempChatId}/chat`, {
                 method: 'POST',
                 body: JSON.stringify({ message: userText }) // Backend expects { message: str }
             });

             if (botResponseData && botResponseData.response) { // API tr·∫£ v·ªÅ { response: str, conversation_id: str, message_id: str }
                 addMessageToUI('bot', botResponseData.response);
             } else {
                  console.warn("API did not return expected bot response.", botResponseData);
                  addMessageToUI('bot', 'L·ªói khi nh·∫≠n ph·∫£n h·ªìi t·ª´ Bot.');
             }

        } catch (error) {
            console.error("Send message error:", error);
            addMessageToUI('bot', `ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
            // Rollback n·∫øu t·∫°o chat m·ªõi th·∫•t b·∫°i
            if (isNewChat && currentChatId !== originalChatId) {
                localStorage.removeItem('current_chat_id');
                currentChatId = null;
                // X√≥a item m·ªõi th√™m kh·ªèi UI
                 const failedItem = historyList.querySelector(`[data-chat-id="${tempChatId}"]`);
                 if (failedItem) failedItem.remove();
                 // Load l·∫°i state c≈© (tin nh·∫Øn ch√†o m·ª´ng)
                 loadChatMessages();
            }
        } finally {
             chatInput.disabled = false;
             sendBtn.disabled = false;
             chatInput.focus();
        }
    }

    // --- N√∫t Chat m·ªõi ---
    newChatBtn.addEventListener('click', () => {
        currentChatId = null;
        localStorage.removeItem('current_chat_id');
        // Reload trang ƒë·ªÉ reset giao di·ªán
        window.location.reload();
    });

    // --- G√°n s·ª± ki·ªán ---
    sendBtn.addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') sendMessage(); });

    // --- ƒê√≥ng menu khi click ra ngo√†i ---
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.chat-menu-btn')) {
            document.querySelectorAll('.chat-menu-dropdown').forEach(menu => {
                menu.style.display = 'none';
            });
        }
    });

    // --- Kh·ªüi ch·∫°y ---
    await loadChatHistory();
    await loadChatMessages();
});