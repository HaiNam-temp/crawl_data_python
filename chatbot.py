from dotenv import load_dotenv
from logger_config import get_logger
from tool import (
    product_search_chain,
    price_comparison_chain,
    get_vector_db,
    get_chat_model
)
# Import multi-platform crawler thay cho Tiki only
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'Crawl_Data'))
from Crawl_Data.run_all_crawlers import crawl_all_platforms

import json
from datetime import datetime
from langchain_core.documents import Document
load_dotenv()
logger = get_logger(__name__)
products_vector_db = get_vector_db()
chat_model = get_chat_model()
from backend.database import save_products
def process_user_query(user_query: str) -> str:
    logger.info(f"User query: {user_query}")
    try:
        intent_prompt = f"""
        B·∫°n l√† m·ªôt tr·ª£ l√Ω AI. H√£y ph√¢n lo·∫°i c√¢u sau th√†nh m·ªôt trong hai lo·∫°i:
        1. "chat" - n·∫øu ng∆∞·ªùi d√πng ch·ªâ ƒëang tr√≤ chuy·ªán, h·ªèi linh tinh, kh√¥ng y√™u c·∫ßu so s√°nh gi√°.
        2. "compare" - n·∫øu ng∆∞·ªùi d√πng ƒëang mu·ªën t√¨m, xem, ho·∫∑c so s√°nh gi√° s·∫£n ph·∫©m.

        C√¢u ng∆∞·ªùi d√πng: "{user_query}"

        N·∫øu l√† "chat", ch·ªâ tr·∫£ v·ªÅ t·ª´ "chat".
        N·∫øu l√† "compare", h√£y tr·∫£ v·ªÅ **t√™n s·∫£n ph·∫©m k√®m ƒë·∫∑c ƒëi·ªÉm** (v√≠ d·ª•: "iPhone 14 Pro 128GB").
        """

        intent_result = chat_model.invoke(intent_prompt).content.strip()
        logger.info(f"Detected intent result: {intent_result}")

        # üß© B∆∞·ªõc 2: X·ª≠ l√Ω intent
        if intent_result.lower() == "chat":
            response = chat_model.invoke(
                f"Ng∆∞·ªùi d√πng n√≥i: {user_query}. H√£y ph·∫£n h·ªìi t·ª± nhi√™n, th√¢n thi·ªán nh∆∞ m·ªôt tr·ª£ l√Ω AI."
            ).content
            return response

        # N·∫øu kh√¥ng ph·∫£i chat, coi k·∫øt qu·∫£ l√† t√™n s·∫£n ph·∫©m c·∫ßn t√¨m
        product_name = intent_result
        logger.info(f"Extracted product name: {product_name}")

        # üîç B∆∞·ªõc 3: T√¨m s·∫£n ph·∫©m
        # product_search_chain may be either a chain-like object with an
        # .invoke(...) method or a plain callable (fallback function). Handle
        # both cases to avoid AttributeError when a simple function was
        # returned during initialization.
        def _call_chain(chain, inputs):
            try:
                if hasattr(chain, 'invoke') and callable(getattr(chain, 'invoke')):
                    return chain.invoke(inputs)
                elif callable(chain):
                    return chain(inputs)
                else:
                    raise ValueError('Provided chain is not callable')
            except Exception as e:
                logger.error('Error invoking chain: %s', e, exc_info=True)
                raise

        search_result = _call_chain(product_search_chain, {"question": product_name})
        # If no relevant results found in vector database, crawl from all platforms
        if "t√¥i s·∫Ω t√¨m ki·∫øm" in search_result.lower():
            logger.info(f"Search result: {search_result}")
            # Crawl t·ª´ t·∫•t c·∫£ platforms thay v√¨ ch·ªâ Tiki
            all_products = crawl_all_platforms(product_name, limit=None)

            # Persist crawled products to SQL database for long-term storage
            try:
                saved_count = save_products(all_products)
                logger.info(f"Persisted {saved_count} products into SQL DB after crawling.")
            except Exception as e:
                logger.error(f"Error saving crawled products to SQL DB: {e}")

            if all_products:
                # Start price comparison immediately with crawled data
                context_data = json.dumps(all_products, ensure_ascii=False)
                try:
                    comparison_result = _call_chain(price_comparison_chain, {
                        "context": context_data,
                        "question": f"So s√°nh gi√° {product_name} t·ª´ c√°c k·∫øt qu·∫£ v·ª´a t√¨m ƒë∆∞·ª£c"
                    })
                    if not comparison_result:
                        comparison_result = "Xin l·ªói, kh√¥ng th·ªÉ ph√¢n t√≠ch gi√° s·∫£n ph·∫©m l√∫c n√†y."
                except Exception as e:
                    logger.error(f"Error during price comparison: {str(e)}")
                    comparison_result = "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch gi√° s·∫£n ph·∫©m."
                
                # Add new products to vector database
                try:
                    # Convert products to Document objects
                    documents = []
                    for product in all_products:
                        # Convert product dict to string for embedding
                        product_text = json.dumps(product, ensure_ascii=False)
                        
                        # Create Document object with metadata
                        doc = Document(
                            page_content=product_text,
                            metadata={
                                "name": product["name"],
                                "price": product["price"],
                                "url": product["url"],
                                "rating": product["rating"],
                                "review_count": product["review_count"],
                                "timestamp": product["timestamp"]
                            }
                        )
                        documents.append(doc)

                    
                    # Add documents to vector store
                    products_vector_db.add_documents(documents)
                    logger.info("Updated vector database with new products.")
                except Exception as e:
                    logger.error(f"Error updating vector database: {str(e)}")
                    logger.warning("Search data was processed but may not be stored.")

                return comparison_result
            else:
                return "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ s·∫£n ph·∫©m n√†y tr√™n c√°c s√†n th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c."
        
        return search_result
        
    except Exception as e:
        logger.error(f"Error processing query: {str(e)}")
        return "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n."

def chat_loop():
    """Main chat loop"""
    print("="*50)
    print("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Sophie - Tr·ª£ l√Ω so s√°nh gi√° th√¥ng minh!")
    print("T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:")
    print("1. T√¨m ki·∫øm th√¥ng tin s·∫£n ph·∫©m")
    print("2. So s√°nh gi√° gi·ªØa c√°c s·∫£n ph·∫©m")
    print("3. Ph√¢n t√≠ch v√† ƒë∆∞a ra ƒë·ªÅ xu·∫•t mua s·∫Øm")
    print("\nƒê·ªÉ tho√°t, b·∫°n c√≥ th·ªÉ g√µ 'quit' ho·∫∑c 'exit'")
    print("="*50)
    
    while True:
        try:
            user_input = input("\nB·∫°n mu·ªën t√¨m s·∫£n ph·∫©m g√¨? ").strip()
            
            # Skip empty input or input starting with &
            if not user_input or user_input.startswith('&'):
                continue
            
            if user_input.lower() in ['quit', 'exit']:
                print("\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•. H·∫πn g·∫∑p l·∫°i!")
                break
                
            response = process_user_query(user_input)
            print(f"\nSophie: {response}")
            
        except EOFError:
            # Handle Ctrl+D or similar input termination
            print("\nK·∫øt th√∫c ch∆∞∆°ng tr√¨nh do ng·∫Øt input.")
            break
        except KeyboardInterrupt:
            # Handle Ctrl+C
            print("\nK·∫øt th√∫c ch∆∞∆°ng tr√¨nh theo y√™u c·∫ßu ng∆∞·ªùi d√πng.")
            break
        except Exception as e:
            print(f"\nC√≥ l·ªói x·∫£y ra: {str(e)}")
            print("Vui l√≤ng th·ª≠ l·∫°i.")

if __name__ == "__main__":
    chat_loop()